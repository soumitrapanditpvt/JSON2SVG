name: SVG Conversion Workflow with Pre-Built Docker Image

on:
  push:
    branches:
      - main
    paths:
      - '**/*.json'  # Trigger the workflow for any .json file change in any directory

  pull_request:
    branches:
      - main
    paths:
      - '**/*.json'

  workflow_dispatch:

jobs:
  build-and-convert:
    runs-on: ubuntu-latest

    # Use the pre-built Docker image from GitHub Container Registry
    container:
      image: ghcr.io/primevisiontechnology-com/pvt-converter-gh-buildimage-python-3.12:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_PAT }}  # Use the PAT stored in the repository secrets

    steps:
      # Step 1: Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Mark the repository as a safe directory for Git
      - name: Mark repository as safe for Git
        run: git config --global --add safe.directory $GITHUB_WORKSPACE

      # Step 3: Get list of modified JSON files using git log and format them correctly
      - name: Get modified JSON files
        id: get_files
        run: |
          # Capture the modified JSON files using git log
          MODIFIED_JSON_FILES=$(git log -m -1 --name-only --pretty="" -- '*.json')

          # Debugging: Print the exact list of modified files
          echo "Raw MODIFIED_JSON_FILES: $MODIFIED_JSON_FILES"

          # Replace newlines with a single space to create a properly formatted string
          FORMATTED_JSON_FILES=$(echo "$MODIFIED_JSON_FILES" | tr '\n' ' ')

          # Debugging: Print the formatted JSON files
          echo "Formatted MODIFIED_JSON_FILES: $FORMATTED_JSON_FILES"

          # Write the formatted JSON files to the GITHUB_ENV environment file
          echo "json_files=$FORMATTED_JSON_FILES" >> $GITHUB_ENV

      # Step 4: Extract directories from the modified JSON files and store them in GITHUB_ENV
      - name: Get modified directories
        id: get_dirs
        run: |
          # Access the json_files environment variable
          MODIFIED_JSON_FILES="${{ env.json_files }}"

          # Initialize an empty string to store modified folders
          MODIFIED_FOLDERS=""

          # Loop through each modified file and extract its directory
          for file in $MODIFIED_JSON_FILES; do
            folder=$(dirname "$file")
            echo "Found folder: $folder"  # Debugging: Print each folder found
            MODIFIED_FOLDERS="$MODIFIED_FOLDERS $folder"
          done

          # Print intermediate value of MODIFIED_FOLDERS for debugging
          echo "Intermediate MODIFIED_FOLDERS value: $MODIFIED_FOLDERS"

          # Use tr to convert spaces to newlines, sort uniquely, and remove empty lines
          MODIFIED_FOLDERS=$(echo "$MODIFIED_FOLDERS" | tr ' ' '\n' | sort -u | sed '/^$/d')

          # Format the variable correctly to avoid newlines or special characters
          FORMATTED_FOLDERS=$(printf "%s" "$MODIFIED_FOLDERS" | tr '\n' ' ' | sed 's/[[:space:]]*$//')

          # Debugging: Print the formatted folders for verification
          echo "Formatted directories: '$FORMATTED_FOLDERS'"

          # Write only the formatted directories to the GITHUB_ENV environment file
          echo "folders=$FORMATTED_FOLDERS" >> $GITHUB_ENV

      # Step 5: Run the conversion script for each modified directory
      - name: Run conversion for each modified directory
        run: |
          for folder in ${{ env.folders }}; do
            echo "Processing folder: $folder"
            python main.py /usr/src/app/$folder
          done

      # Step 6: Commit and push changes (e.g., new SVG files) back to the repository
      - name: Commit and Push SVGs
        env:
          PAT: ${{ secrets.GHCR_PAT }}  # Use the PAT from the secrets
        run: |
          # Configure Git user and email for committing changes
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Ensure the repository is marked as safe for Git
          git config --global --add safe.directory $GITHUB_WORKSPACE
          
          # Set remote URL to use the PAT for authentication
          git remote set-url origin https://x-access-token:${PAT}@github.com/${{ github.repository }}.git
          
          # Add and commit the newly generated SVG and DXF files
          git add **/*.svg **/*.dxf
          git commit -m "Add generated SVG and DXF files"
          
          # Push changes back to the main branch
          git push origin main
